-- 创建 promotion_codes 表
CREATE TABLE IF NOT EXISTS "promotion_codes" (
  "id" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "code" text UNIQUE NOT NULL,
  "description" text,
  "discount_type" text NOT NULL, -- 'percentage' 或 'fixed_amount'
  "discount_value" numeric NOT NULL, -- 百分比或固定金额
  "min_purchase_amount" numeric DEFAULT 0, -- 最低购买金额
  "max_discount_amount" numeric, -- 最大折扣金额（对于百分比折扣）
  "start_date" timestamptz NOT NULL,
  "end_date" timestamptz NOT NULL,
  "is_active" boolean DEFAULT true,
  "usage_limit" integer, -- 总使用次数限制
  "usage_count" integer DEFAULT 0, -- 已使用次数
  "created_at" timestamptz DEFAULT now(),
  "updated_at" timestamptz DEFAULT now(),
  "product_type" text, -- 'funny-biography', 'love-story', 或 null（适用于所有产品）
  "stripe_promotion_code_id" text, -- 关联的 Stripe 促销码 ID
  "stripe_coupon_id" text -- 关联的 Stripe 优惠券 ID
);

-- 添加索引
CREATE INDEX IF NOT EXISTS "promotion_codes_code_idx" ON "promotion_codes" ("code");
CREATE INDEX IF NOT EXISTS "promotion_codes_is_active_idx" ON "promotion_codes" ("is_active");

-- 添加 RLS 策略
ALTER TABLE "promotion_codes" ENABLE ROW LEVEL SECURITY;

-- 创建允许查看促销码的策略
CREATE POLICY "Anyone can view active promotion codes" 
  ON "promotion_codes" 
  FOR SELECT 
  USING (is_active = true AND current_timestamp BETWEEN start_date AND end_date);

-- 创建允许管理员管理促销码的策略
CREATE POLICY "Service role has full access to promotion codes" 
  ON "promotion_codes" 
  FOR ALL 
  USING (auth.jwt() ? 'role' AND auth.jwt()->>'role' = 'service_role');

-- 添加触发器更新时间戳
CREATE OR REPLACE FUNCTION update_promotion_codes_timestamp()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = now();
   RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_promotion_codes_timestamp
BEFORE UPDATE ON "promotion_codes"
FOR EACH ROW
EXECUTE PROCEDURE update_promotion_codes_timestamp();

-- 添加注释
COMMENT ON TABLE "promotion_codes" IS 'Stores promotion codes for discounts';
